class Paddle {

    field int x, y;      
    field int width, height;  
    field int direction;
    field int tempX, tempY;     

    constructor Paddle new(int Ax, int Ay, int Awidth, int Aheight) {
        let x = Ax;
        let y = Ay;
        let width = Awidth;
        let height = Aheight;

        let tempX = x;
        let tempY = y;
        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void draw() {
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y, x + width, y + height);
        return;
    }
    
    method void clear() {
        do Screen.setColor(false);
        do Screen.drawRectangle(tempX, tempY, tempX + width, tempY + height);
        return;
    }

    method int getX() {
        return x;
    }

    method int getY() {
        return y;
    }

    method void setTemps(int AtempX, int AtempY) {
        let tempX = AtempX;
        let tempY = AtempY;
        return;
    }

    method void move(boolean left) {
        if (left) {
            let x = x - 4;
            if (x < 0) { let x = 0; }
        } else {
            let x = x + 4;
            if ((x + width) > 511) { let x = 511 - width; }
        }
        return;
    }

    method boolean checkCollision(Ball ball){
		var Point p1, p2, p3;
        var boolean r1, r2, r3;
        var boolean result;
        let result = false;

        if ((ball.getY() - y) > (height + 1)) {
            return false;
        } 

        if ((y - ball.getY()) > (height + 1)) {
            return false;
        } 


        let p1 = ball.getDownLeft();
        let p2 = ball.getDown();
        let p3 = ball.getDownLeft();


        let r1 = checkPointCollision(p1);
        let r2 = checkPointCollision(p2);
        let r3 = checkPointCollision(p3);
        
	
        if ((r1) | (r2) | (r3)) {
            let result = true;
        }
        
        do p1.dispose();
        do p2.dispose();
        do p3.dispose();


		return result;
	}

    method boolean checkPointCollision(Point p) {
        var int pX, pY;
        let pX = p.getX();
        let pY = p.getY() + 2;

        if ((pY > y) & (pY < (y + height)) & (pX > x) & (pX < (x + width))) {
            return true;
        }

        return false;
    }
}