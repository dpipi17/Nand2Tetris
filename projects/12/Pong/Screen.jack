// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static int screenBase;
    static int screenEnd;
    static boolean color;

    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let screenBase = 16384;
        let screenEnd = 24575;
        let color = true;

        let twoToThe = Array.new(16);
		let twoToThe[0] = 1;
		let twoToThe[1] = 2;
		let twoToThe[2] = 4;
		let twoToThe[3] = 8;
		let twoToThe[4] = 16;
		let twoToThe[5] = 32;
		let twoToThe[6] = 64;
		let twoToThe[7] = 128;
		let twoToThe[8] = 256;
		let twoToThe[9] = 512;
		let twoToThe[10] = 1024;
		let twoToThe[11] = 2048;
		let twoToThe[12] = 4096;
		let twoToThe[13] = 8192;
		let twoToThe[14] = 16384;
		let twoToThe[15] = 32767 + 1;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = screenBase;
        while(~(i > screenEnd)) {
            do Memory.poke(i, 0);
            let i = i + 1;
        } 
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, bitValue;
        let address = (32 * y) + (x / 16);
        let value = Memory.peek(screenBase + address);

        let bitValue = twoToThe[x & 15];
        if (color) {
            let value = value | bitValue;
        } else {
            let value = value & (~bitValue);
        }
        
        do Memory.poke(screenBase + address,value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy, a, b, diff, sign;

        let sign = 1;
        let x = Math.min(x1, x2);
        if (x = x1) {
            let y = y1;
            if (y > y2) {
                let sign = -1;
            }
        } else {
            let y = y2;
            if (y > y1) {
                let sign = -1;
            }
        }

        let dx = Math.abs(x1 - x2);
        let dy = Math.abs(y1 - y2);
        let a = 0;
        let b = 0;

        if (dx = 0) {
            let y = Math.min(y1, y2);
            while(~(b > dy)) {
                do Screen.drawPixel(x, y + b);
                let b = b + 1;
            }
        } else {
            if (dy = 0) {
                while(~(a > dx)) {
                    do Screen.drawPixel(x + a, y);
                    let a = a + 1;
                }
            } else {
                let diff = 0;

                while ((~(a > dx)) & (~(b > dy))) {
                    do Screen.drawPixel(x + a, y + (sign * b));

                    if (diff < 0) {
                        let a = a + 1;
                        let diff = diff + dy;
                    } else {
                        let b = b + 1;
                        let diff = diff - dx;
                    }
                }
            }
        }


        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy, a;
        let x = Math.min(x1, x2);
        let y = Math.min(y1, y2);
        let dx = Math.abs(x1 - x2);
        let dy = Math.abs(y1 - y2);
        let a = 0;

        while(~(a > dx)) {
            do Screen.drawLine(x + a, y, x + a, y + dy);
            let a = a + 1;
        }
        return;   
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, x1, x2, y1, y2, tmp;
        if (r > 181) {
            let r = 181;
        }

        let dy = -r;
        while (~(dy > r)) {
            let tmp = Math.sqrt((r * r) - (dy * dy));
            let x1 = x - tmp;
            let y1 = y + dy;
            let x2 = x + tmp;
            let y2 = y + dy;
            do Screen.drawLine(x1, y1, x2, y2);
            let dy  = dy + 1;
        }
        return;
    }
}
